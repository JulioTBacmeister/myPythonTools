#########################################
# building new env on Cheyenne/Casper
#########################################


Thanks for following up.  I cloned the npl-2022b environment following the description in the document:

mamba create --name env4ml --clone npl-2022b


Then I installed tensorflow using the simplest command I thought might work:

mamba install --name env4ml tensorflow



After doing this and activating 'env4ml' I was able to "import tensorflow" in a python session.  Things seem to be working although I do get some warning/info messages the first time I do things:



>>> import tensorflow as tf

2022-09-21 08:13:15.580119: I tensorflow/core/util/util.cc:169] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.



>>> a=tf.constant( np.arange(12),shape=[4,3])

2022-09-21 08:16:27.461855: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  SSE4.1 SSE4.2 AVX AVX2 AVX512F AVX512_VNNI FMA


To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.



Being a novice, I'm not sure whether I should worry about these, but for the moment I won't since they seem related to optimization, not a big concern for me at this stage.



Thanks again


#####################################################
#   numpy where
####################################################

numpy where method 
Need to use & intead of 'and'

>>> print(b)
[10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
>>> print(c)
[-11 -10  -9  -8  -7  -6  -5  -4  -3  -2  -1   0   1   2   3   4   5   6
   7   8]
>>> oo=np.where( (b>25) & (c==-9999))
>>> print(np.size(oo))
0
>>> 
>>> oo=np.where( (b>25) & (c>0))
>>> print(np.size(oo))
4
>>> 

#########################################################
# "PATHS .... "
#####################################################
""" example for ../Plotting """
import sys
sys.path.append('../Plotting/')
""" Now you can imprt modules in ../Plotting"""

#########################################################
# "recompiling" code
#######################################################
>>> import plotdata as pd
>>> import importlib

... do stuff don't like it, modify plotdata.py

>>> importlib.reload(pd)


#####################################################################
#some notes on X-Z plotting
####################################################


>>> xlon=np.arange(280)

>>> zees=np.ones(32)
>>> xx,zz = np.meshgrid(xlon,zees)
>>> xx.shape
(32, 280)

>>> ulv2=np.linspace(-20.,20.,num=41)
>>> print(ulv2)
[-20. -19. -18. -17. -16. -15. -14. -13. -12. -11. -10.  -9.  -8.  -7.
  -6.  -5.  -4.  -3.  -2.  -1.   0.   1.   2.   3.   4.   5.   6.   7.
   8.   9.  10.  11.  12.  13.  14.  15.  16.  17.  18.  19.  20.]
>>> plt.figure(1).clear()
>>> plt.ylim(100000.,10000.)
(100000.0, 10000.0)
>>> plt.contourf(xx,pp2[0,:,200,:], uu2[0,:,200,:]  ,levels=ulv2  ,cmap='RdBu_r')
<matplotlib.contour.QuadContourSet object at 0x2af379503490>
>>> plt.colorbar()
<matplotlib.colorbar.Colorbar object at 0x2af3796ae0d0>
>>> plt.figure(1).clear()
>>> plt.ylim(100000.,10000.)
(100000.0, 10000.0)
>>> plt.contourf(xx,pp2[0,:,200,:], uu2[0,:,200,:]  ,levels=ulv2  ,cmap='RdBu_r')
<matplotlib.contour.QuadContourSet object at 0x2af3793962d0>
>>> plt.colorbar()
<matplotlib.colorbar.Colorbar object at 0x2af3798d4410>
>>> 


###################################################################
# NumPy array convenstions
###################################################################
>>> a1=[[1,2,3],[-3,4,7]]
>>> a1.shape
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'list' object has no attribute 'shape'
>>> a1=np.array([[1,2,3],[-3,4,7]])
>>> a1.shape
(2, 3)
>>> ta=np.transpose(a1)
>>> np.matmul(a1,ta)
array([[14, 26],
       [26, 74]])
>>> np.matmul(ta,a1)
array([[ 10, -10, -18],
       [-10,  20,  34],
       [-18,  34,  58]])
>>> 


######################################################
# Pandas dataframe manipulations
#####################################################

>>> f='../Datasets/housing/housing.csv'
>>> import pandas as pd
>>> df=pd.read_csv(f)
>>> df.index
RangeIndex(start=0, stop=20640, step=1)
>>> df.columns
Index(['longitude', 'latitude', 'housing_median_age', 'total_rooms',
       'total_bedrooms', 'population', 'households', 'median_income',
       'median_house_value', 'ocean_proximity'],
      dtype='object')
>>> df['longitude'].size
20640

>>> df.describe()
          longitude      latitude  housing_median_age   total_rooms  total_bedrooms    population    households  median_income  median_house_value
count  20640.000000  20640.000000        20640.000000  20640.000000    20433.000000  20640.000000  20640.000000   20640.000000        20640.000000
mean    -119.569704     35.631861           28.639486   2635.763081      537.870553   1425.476744    499.539680       3.870671       206855.816909
std        2.003532      2.135952           12.585558   2181.615252      421.385070   1132.462122    382.329753       1.899822       115395.615874
min     -124.350000     32.540000            1.000000      2.000000        1.000000      3.000000      1.000000       0.499900        14999.000000
25%     -121.800000     33.930000           18.000000   1447.750000      296.000000    787.000000    280.000000       2.563400       119600.000000
50%     -118.490000     34.260000           29.000000   2127.000000      435.000000   1166.000000    409.000000       3.534800       179700.000000
75%     -118.010000     37.710000           37.000000   3148.000000      647.000000   1725.000000    605.000000       4.743250       264725.000000
max     -114.310000     41.950000           52.000000  39320.000000     6445.000000  35682.000000   6082.000000      15.000100       500001.000000


>>> x=df['total_bedrooms']
>>> poo=x.isnull()
>>> zz=np.where( poo == True )
>>> print(zz[0])
[  290   341   538   563   696   738  1097  1350  1456  1493  1606  2028
   ...	 ...   ...   ...   ...	 ...  ...   ...	  ...	...   ...   ...	
19638 19766 19818 19833 19890 19932 19959 20046 20069 20125 20267 20268
 20372 20460 20484]
>>> print(zz[0].size)
207


>>> print(df.loc[zz[0]])
       longitude  latitude  housing_median_age  total_rooms  total_bedrooms  population  households  median_income  median_house_value ocean_proximity
290      -122.16     37.77                47.0       1256.0             NaN       570.0       218.0         4.3750            161900.0        NEAR BAY
341      -122.17     37.75                38.0        992.0             NaN       732.0       259.0         1.6196             85100.0        NEAR BAY
...          ...       ...                 ...          ...             ...         ...         ...            ...                 ...             ...
20372    -118.88     34.17                15.0       4260.0             NaN      1701.0       669.0         5.1033            410700.0       <1H OCEAN
20460    -118.75     34.29                17.0       5512.0             NaN      2734.0       814.0         6.6073            258100.0       <1H OCEAN
20484    -118.72     34.28                17.0       3051.0             NaN      1705.0       495.0         5.7376            218600.0       <1H OCEAN

